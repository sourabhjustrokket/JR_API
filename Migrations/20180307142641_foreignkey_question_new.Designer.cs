// <auto-generated />
using JR_API.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace JR_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180307142641_foreignkey_question_new")]
    partial class foreignkey_question_new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JR_API.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Detail");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsApproved");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Title");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("JR_API.Entities.QuestionTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<int>("QuestionId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TagId");

                    b.ToTable("QuestionTags");
                });

            modelBuilder.Entity("JR_API.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("QuestionId");

                    b.Property<string>("TagName");

                    b.Property<string>("TagSymbol");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("JR_API.Entities.TagRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("TagFamilyId");

                    b.Property<int>("TagFamilyMemberId");

                    b.HasKey("Id");

                    b.HasIndex("TagFamilyId");

                    b.HasIndex("TagFamilyMemberId");

                    b.ToTable("TagRelations");
                });

            modelBuilder.Entity("JR_API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("UserType")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JR_API.Entities.Question", b =>
                {
                    b.HasOne("JR_API.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JR_API.Entities.QuestionTag", b =>
                {
                    b.HasOne("JR_API.Entities.Question", "question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JR_API.Entities.Tag", "tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JR_API.Entities.Tag", b =>
                {
                    b.HasOne("JR_API.Entities.Question")
                        .WithMany("tags")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("JR_API.Entities.TagRelationship", b =>
                {
                    b.HasOne("JR_API.Entities.Tag", "TagFamily")
                        .WithMany()
                        .HasForeignKey("TagFamilyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JR_API.Entities.Tag", "TagFamilyMember")
                        .WithMany()
                        .HasForeignKey("TagFamilyMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
